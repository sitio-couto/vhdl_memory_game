-- 21/05 -> Checked keybord functionality

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity setup_table is
  port (
	 SW : in std_logic_vector(9 downto 0);
    CLOCK_50 : in std_logic;
    PS2_DAT : inout STD_LOGIC;
    PS2_CLK : inout STD_LOGIC;
	 HEX5 : out std_logic_vector(6 downto 0);
	 HEX4 : out std_logic_vector(6 downto 0);
	 HEX3 : out std_logic_vector(6 downto 0);
	 HEX2 : out std_logic_vector(6 downto 0);
    HEX1 : out std_logic_vector(6 downto 0);
    HEX0 : out std_logic_vector(6 downto 0);
	 LEDR : out std_logic_vector(9 downto 0)
  );
end setup_table;

architecture rtl of game_control is

begin
	-- INICIALIZAÇAO DO DECK.
	i := 0;
	while (i < 80) loop
		if t_cards = 1 and i < 8 then
			deck(i) <= i*10;
		elsif t_cards = 2 and i < 10 then 
			deck(i) <= i;
		elsif t_cards = 3 then 
			deck(i) <= i;
		end if;

		-- Zera o mapeamento das posicoes da mesa.
		table_map(i) <= '0';

		i := i + 1;
	end loop;

	next_state <= "0100";

	when "0100" =>			
	-- RAMDOMIZAÇAO DA MESA DE JOGO (i := 0).
	i := 0;
	while (i < 80) loop
		seed := (seed*A + B) mod M;
		rand1 := (seed mod n_cards);
		seed := (seed*A + B) mod M;
		rand2 := (seed mod n_cards);
		
		-- Caso ja tenha inicializado todas as cartas, seta a flag.
		if i < (n_cards/2) then
			-- INICIALIZA CARTAS PAR A PAR
			-- Aloca a primeira carta do par.
			flag := 0;
			aux := 0;
			while (aux < 80) loop
				
				lin := (rand1/8 mod 10); -- Cada linha possui ate 8 cartas.
				col := (rand1 mod 8);    -- Colunas sao indexadas de 0 a 7.
			
				if table_map(lin*8 + col) = '0' and flag = 0 then
					-- Caso encontre uma posicao, salva e seta a flag.
					table_map(lin*8 + col) <= '1'; -- Marca posicao como ocupada
					lin1 := lin;  -- Salva linha da posicao				
					col1 := col;  -- Salva coluna da posicao
					flag := 1;	  -- Seta flag para mostra que ja tem uma posicao.
				else
					-- Caso a posicao ja esteja ocupada, vai pra proxima posicao.
					rand1 := rand1 + 1;
					-- Caso exceda o numero de cartas, vai pra primeira posicao.
					if (rand1 = n_cards) then rand1 := 0; 
					end if;
				end if;

				aux := aux + 1;
			end loop;
			
			-- Aloca a primeira carta do par.
			flag := 0;
			aux := 0;
			while (aux < 80) loop
				
				lin := (rand2/8 mod 10); -- Cada linha possui ate 8 cartas.
				col := (rand2 mod 8);    -- Colunas sao indexadas de 0 a 7.
			
				if table_map(lin*8 + col) = '0' and flag = 0 then
					-- Caso encontre uma posicao, salva e seta a flag.
					table_map(lin*8 + col) <= '1'; -- Marca posicao como ocupada
					lin2 := lin;  -- Salva linha da posicao				
					col2 := col;  -- Salva coluna da posicao
					flag := 1;	  -- Seta flag para mostra que ja tem uma posicao.
				else
					-- Caso a posicao ja esteja ocupada, vai pra proxima posicao.
					rand2 := rand2 + 1;
					-- Caso exceda o numero de cartas, vai pra primeira posicao.
					if (rand2 = n_cards) then rand2 := 0; 
					end if;
				end if;

				aux := aux + 1;
			end loop;
		end if;
		
		-- Registra cartas nas posicoes encontradas
		game_table(lin1*8 + col1) <= deck(i); 
		game_table(lin2*8 + col2) <= deck(i);
		i := i + 1;	-- Incremente o numero de pares setados.
	end loop;
end rtl;	